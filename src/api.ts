/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * EasyNotes API
 * Documentation for EasyNotes API
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
export type ContactsControllerFindAllParams = {
id?: number;
firstName?: string;
lastName?: string;
email?: string;
phone?: string;
dateOfBirth?: string;
instagram?: string;
userId?: number;
};

export type NotesControllerFindAllOrderByItem = typeof NotesControllerFindAllOrderByItem[keyof typeof NotesControllerFindAllOrderByItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotesControllerFindAllOrderByItem = {
  'id:asc': 'id:asc',
  'id:desc': 'id:desc',
  'title:asc': 'title:asc',
  'title:desc': 'title:desc',
  'content:asc': 'content:asc',
  'content:desc': 'content:desc',
  'createdAt:asc': 'createdAt:asc',
  'createdAt:desc': 'createdAt:desc',
  'updatedAt:asc': 'updatedAt:asc',
  'updatedAt:desc': 'updatedAt:desc',
  'userId:asc': 'userId:asc',
  'userId:desc': 'userId:desc',
} as const;

export type NotesControllerFindAllParams = {
orderBy?: NotesControllerFindAllOrderByItem[];
idEquals?: number;
titleEquals?: string;
titleContains?: string;
titleStartsWith?: string;
titleEndsWith?: string;
userIdEquals?: number;
search?: string;
};

export type UsersControllerFindAllParams = {
id?: number;
email?: string;
name?: string;
};

export type MeNotesControllerFindAllUserNotesOrderByItem = typeof MeNotesControllerFindAllUserNotesOrderByItem[keyof typeof MeNotesControllerFindAllUserNotesOrderByItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MeNotesControllerFindAllUserNotesOrderByItem = {
  'id:asc': 'id:asc',
  'id:desc': 'id:desc',
  'title:asc': 'title:asc',
  'title:desc': 'title:desc',
  'content:asc': 'content:asc',
  'content:desc': 'content:desc',
  'createdAt:asc': 'createdAt:asc',
  'createdAt:desc': 'createdAt:desc',
  'updatedAt:asc': 'updatedAt:asc',
  'updatedAt:desc': 'updatedAt:desc',
  'userId:asc': 'userId:asc',
  'userId:desc': 'userId:desc',
} as const;

export type MeNotesControllerFindAllUserNotesParams = {
orderBy?: MeNotesControllerFindAllUserNotesOrderByItem[];
idEquals?: number;
titleEquals?: string;
titleContains?: string;
titleStartsWith?: string;
titleEndsWith?: string;
search?: string;
};

export interface CreateContactDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  instagram?: string;
  note?: string;
  userId: number;
}

export interface CreateNoteDto {
  title: string;
  content: string;
  userId: number;
}

export interface CreateUserDto {
  email: string;
  password: string;
  name?: string;
  bio?: string;
}

export interface UpdateContactDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  instagram?: string;
  note?: string;
  userId?: number;
}

export interface RetrieveContactDto {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dateOfBirth: string;
  instagram: string;
  note: string;
  createdAt: string;
  updatedAt: string;
  userId: number;
}

export interface CreateUserContactDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  instagram?: string;
  note?: string;
}

export interface UpdateNoteDto {
  title?: string;
  content?: string;
  userId?: number;
}

export interface NoteDto {
  id: number;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  userId: number;
}

export interface CreateUserNoteDto {
  title: string;
  content: string;
}

export interface UpdateUserDto {
  email?: string;
  password?: string;
  name?: string;
  bio?: string;
}

export interface ChangePasswordDto {
  currentPassword: string;
  newPassword: string;
}

export interface UserDto {
  id: number;
  email: string;
  name: string;
  bio: string;
  createdAt: string;
  updatedAt: string;
}

export interface RegisterDto {
  email: string;
  password: string;
}

export interface LoginDto {
  email: string;
  password: string;
}




export const authControllerLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/auth/login`,
      loginDto,options
    );
  }



export const getAuthControllerLoginMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginDto
    export type AuthControllerLoginMutationError = AxiosError<unknown>

    export const useAuthControllerLogin = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerLoginMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const authControllerRegister = (
    registerDto: RegisterDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/auth/register`,
      registerDto,options
    );
  }



export const getAuthControllerRegisterMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = RegisterDto
    export type AuthControllerRegisterMutationError = AxiosError<unknown>

    export const useAuthControllerRegister = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerRegisterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const authControllerLogout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.post(
      `/auth/logout`,undefined,options
    );
  }



export const getAuthControllerLogoutMutationOptions = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogout>>, TVariables> = () => {
          

          return  authControllerLogout(axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogout>>>
    
    export type AuthControllerLogoutMutationError = AxiosError<unknown>

    export const useAuthControllerLogout = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerLogoutMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const authControllerChangePassword = (
    changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.post(
      `/auth/change-password`,
      changePasswordDto,options
    );
  }



export const getAuthControllerChangePasswordMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerChangePassword>>, TError,{data: ChangePasswordDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerChangePassword>>, TError,{data: ChangePasswordDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerChangePassword>>, {data: ChangePasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerChangePassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerChangePassword>>>
    export type AuthControllerChangePasswordMutationBody = ChangePasswordDto
    export type AuthControllerChangePasswordMutationError = AxiosError<unknown>

    export const useAuthControllerChangePassword = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerChangePassword>>, TError,{data: ChangePasswordDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerChangePasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meControllerMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.get(
      `/me`,options
    );
  }


export const getMeControllerMeQueryKey = () => [`/me`] as const;
  

    
export const getMeControllerMeQueryOptions = <TData = Awaited<ReturnType<typeof meControllerMe>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meControllerMe>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof meControllerMe>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeControllerMeQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof meControllerMe>>> = ({ signal }) => meControllerMe({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type MeControllerMeQueryResult = NonNullable<Awaited<ReturnType<typeof meControllerMe>>>
export type MeControllerMeQueryError = AxiosError<unknown>

export const useMeControllerMe = <TData = Awaited<ReturnType<typeof meControllerMe>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meControllerMe>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMeControllerMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const meControllerUpdateMe = (
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.patch(
      `/me`,
      updateUserDto,options
    );
  }



export const getMeControllerUpdateMeMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meControllerUpdateMe>>, TError,{data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meControllerUpdateMe>>, TError,{data: UpdateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meControllerUpdateMe>>, {data: UpdateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  meControllerUpdateMe(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeControllerUpdateMeMutationResult = NonNullable<Awaited<ReturnType<typeof meControllerUpdateMe>>>
    export type MeControllerUpdateMeMutationBody = UpdateUserDto
    export type MeControllerUpdateMeMutationError = AxiosError<unknown>

    export const useMeControllerUpdateMe = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meControllerUpdateMe>>, TError,{data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeControllerUpdateMeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meNotesControllerCreateUserNote = (
    createUserNoteDto: CreateUserNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto>> => {
    return axios.post(
      `/me/notes`,
      createUserNoteDto,options
    );
  }



export const getMeNotesControllerCreateUserNoteMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerCreateUserNote>>, TError,{data: CreateUserNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerCreateUserNote>>, TError,{data: CreateUserNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meNotesControllerCreateUserNote>>, {data: CreateUserNoteDto}> = (props) => {
          const {data} = props ?? {};

          return  meNotesControllerCreateUserNote(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeNotesControllerCreateUserNoteMutationResult = NonNullable<Awaited<ReturnType<typeof meNotesControllerCreateUserNote>>>
    export type MeNotesControllerCreateUserNoteMutationBody = CreateUserNoteDto
    export type MeNotesControllerCreateUserNoteMutationError = AxiosError<unknown>

    export const useMeNotesControllerCreateUserNote = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerCreateUserNote>>, TError,{data: CreateUserNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeNotesControllerCreateUserNoteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meNotesControllerFindAllUserNotes = (
    params?: MeNotesControllerFindAllUserNotesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto[]>> => {
    return axios.get(
      `/me/notes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getMeNotesControllerFindAllUserNotesQueryKey = (params?: MeNotesControllerFindAllUserNotesParams,) => [`/me/notes`, ...(params ? [params]: [])] as const;
  

    
export const getMeNotesControllerFindAllUserNotesQueryOptions = <TData = Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>, TError = AxiosError<unknown>>(params?: MeNotesControllerFindAllUserNotesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeNotesControllerFindAllUserNotesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>> = ({ signal }) => meNotesControllerFindAllUserNotes(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type MeNotesControllerFindAllUserNotesQueryResult = NonNullable<Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>>
export type MeNotesControllerFindAllUserNotesQueryError = AxiosError<unknown>

export const useMeNotesControllerFindAllUserNotes = <TData = Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>, TError = AxiosError<unknown>>(
 params?: MeNotesControllerFindAllUserNotesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meNotesControllerFindAllUserNotes>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMeNotesControllerFindAllUserNotesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const meNotesControllerFindOneUserNote = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto>> => {
    return axios.get(
      `/me/notes/${id}`,options
    );
  }


export const getMeNotesControllerFindOneUserNoteQueryKey = (id: string,) => [`/me/notes/${id}`] as const;
  

    
export const getMeNotesControllerFindOneUserNoteQueryOptions = <TData = Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeNotesControllerFindOneUserNoteQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>> = ({ signal }) => meNotesControllerFindOneUserNote(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type MeNotesControllerFindOneUserNoteQueryResult = NonNullable<Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>>
export type MeNotesControllerFindOneUserNoteQueryError = AxiosError<unknown>

export const useMeNotesControllerFindOneUserNote = <TData = Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meNotesControllerFindOneUserNote>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMeNotesControllerFindOneUserNoteQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const meNotesControllerUpdateUserNote = (
    id: string,
    updateNoteDto: UpdateNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto>> => {
    return axios.patch(
      `/me/notes/${id}`,
      updateNoteDto,options
    );
  }



export const getMeNotesControllerUpdateUserNoteMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerUpdateUserNote>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerUpdateUserNote>>, TError,{id: string;data: UpdateNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meNotesControllerUpdateUserNote>>, {id: string;data: UpdateNoteDto}> = (props) => {
          const {id,data} = props ?? {};

          return  meNotesControllerUpdateUserNote(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeNotesControllerUpdateUserNoteMutationResult = NonNullable<Awaited<ReturnType<typeof meNotesControllerUpdateUserNote>>>
    export type MeNotesControllerUpdateUserNoteMutationBody = UpdateNoteDto
    export type MeNotesControllerUpdateUserNoteMutationError = AxiosError<unknown>

    export const useMeNotesControllerUpdateUserNote = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerUpdateUserNote>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeNotesControllerUpdateUserNoteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meNotesControllerRemoveUserNote = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto>> => {
    return axios.delete(
      `/me/notes/${id}`,options
    );
  }



export const getMeNotesControllerRemoveUserNoteMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerRemoveUserNote>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerRemoveUserNote>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meNotesControllerRemoveUserNote>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  meNotesControllerRemoveUserNote(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeNotesControllerRemoveUserNoteMutationResult = NonNullable<Awaited<ReturnType<typeof meNotesControllerRemoveUserNote>>>
    
    export type MeNotesControllerRemoveUserNoteMutationError = AxiosError<unknown>

    export const useMeNotesControllerRemoveUserNote = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meNotesControllerRemoveUserNote>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeNotesControllerRemoveUserNoteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meContactsControllerCreateUserContact = (
    createUserContactDto: CreateUserContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.post(
      `/me/contacts`,
      createUserContactDto,options
    );
  }



export const getMeContactsControllerCreateUserContactMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerCreateUserContact>>, TError,{data: CreateUserContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerCreateUserContact>>, TError,{data: CreateUserContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meContactsControllerCreateUserContact>>, {data: CreateUserContactDto}> = (props) => {
          const {data} = props ?? {};

          return  meContactsControllerCreateUserContact(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeContactsControllerCreateUserContactMutationResult = NonNullable<Awaited<ReturnType<typeof meContactsControllerCreateUserContact>>>
    export type MeContactsControllerCreateUserContactMutationBody = CreateUserContactDto
    export type MeContactsControllerCreateUserContactMutationError = AxiosError<unknown>

    export const useMeContactsControllerCreateUserContact = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerCreateUserContact>>, TError,{data: CreateUserContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeContactsControllerCreateUserContactMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meContactsControllerFindAllUserContacts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto[]>> => {
    return axios.get(
      `/me/contacts`,options
    );
  }


export const getMeContactsControllerFindAllUserContactsQueryKey = () => [`/me/contacts`] as const;
  

    
export const getMeContactsControllerFindAllUserContactsQueryOptions = <TData = Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeContactsControllerFindAllUserContactsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>> = ({ signal }) => meContactsControllerFindAllUserContacts({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type MeContactsControllerFindAllUserContactsQueryResult = NonNullable<Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>>
export type MeContactsControllerFindAllUserContactsQueryError = AxiosError<unknown>

export const useMeContactsControllerFindAllUserContacts = <TData = Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meContactsControllerFindAllUserContacts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMeContactsControllerFindAllUserContactsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const meContactsControllerFindOneUserContact = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.get(
      `/me/contacts/${id}`,options
    );
  }


export const getMeContactsControllerFindOneUserContactQueryKey = (id: string,) => [`/me/contacts/${id}`] as const;
  

    
export const getMeContactsControllerFindOneUserContactQueryOptions = <TData = Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeContactsControllerFindOneUserContactQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>> = ({ signal }) => meContactsControllerFindOneUserContact(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type MeContactsControllerFindOneUserContactQueryResult = NonNullable<Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>>
export type MeContactsControllerFindOneUserContactQueryError = AxiosError<unknown>

export const useMeContactsControllerFindOneUserContact = <TData = Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof meContactsControllerFindOneUserContact>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMeContactsControllerFindOneUserContactQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const meContactsControllerUpdateUserContact = (
    id: string,
    updateContactDto: UpdateContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.patch(
      `/me/contacts/${id}`,
      updateContactDto,options
    );
  }



export const getMeContactsControllerUpdateUserContactMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerUpdateUserContact>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerUpdateUserContact>>, TError,{id: string;data: UpdateContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meContactsControllerUpdateUserContact>>, {id: string;data: UpdateContactDto}> = (props) => {
          const {id,data} = props ?? {};

          return  meContactsControllerUpdateUserContact(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeContactsControllerUpdateUserContactMutationResult = NonNullable<Awaited<ReturnType<typeof meContactsControllerUpdateUserContact>>>
    export type MeContactsControllerUpdateUserContactMutationBody = UpdateContactDto
    export type MeContactsControllerUpdateUserContactMutationError = AxiosError<unknown>

    export const useMeContactsControllerUpdateUserContact = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerUpdateUserContact>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeContactsControllerUpdateUserContactMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const meContactsControllerRemoveUserContact = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.delete(
      `/me/contacts/${id}`,options
    );
  }



export const getMeContactsControllerRemoveUserContactMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerRemoveUserContact>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerRemoveUserContact>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof meContactsControllerRemoveUserContact>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  meContactsControllerRemoveUserContact(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type MeContactsControllerRemoveUserContactMutationResult = NonNullable<Awaited<ReturnType<typeof meContactsControllerRemoveUserContact>>>
    
    export type MeContactsControllerRemoveUserContactMutationError = AxiosError<unknown>

    export const useMeContactsControllerRemoveUserContact = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof meContactsControllerRemoveUserContact>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getMeContactsControllerRemoveUserContactMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersControllerCreate = (
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.post(
      `/users`,
      createUserDto,options
    );
  }



export const getUsersControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerCreate>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  usersControllerCreate(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreate>>>
    export type UsersControllerCreateMutationBody = CreateUserDto
    export type UsersControllerCreateMutationError = AxiosError<unknown>

    export const useUsersControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersControllerCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersControllerFindAll = (
    params?: UsersControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto[]>> => {
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersControllerFindAllQueryKey = (params?: UsersControllerFindAllParams,) => [`/users`, ...(params ? [params]: [])] as const;
  

    
export const getUsersControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerFindAll>>, TError = AxiosError<unknown>>(params?: UsersControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindAll>>> = ({ signal }) => usersControllerFindAll(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UsersControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindAll>>>
export type UsersControllerFindAllQueryError = AxiosError<unknown>

export const useUsersControllerFindAll = <TData = Awaited<ReturnType<typeof usersControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: UsersControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.get(
      `/users/${id}`,options
    );
  }


export const getUsersControllerFindOneQueryKey = (id: string,) => [`/users/${id}`] as const;
  

    
export const getUsersControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindOne>>> = ({ signal }) => usersControllerFindOne(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type UsersControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindOne>>>
export type UsersControllerFindOneQueryError = AxiosError<unknown>

export const useUsersControllerFindOne = <TData = Awaited<ReturnType<typeof usersControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersControllerUpdate = (
    id: string,
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.patch(
      `/users/${id}`,
      updateUserDto,options
    );
  }



export const getUsersControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdate>>, {id: string;data: UpdateUserDto}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerUpdate(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdate>>>
    export type UsersControllerUpdateMutationBody = UpdateUserDto
    export type UsersControllerUpdateMutationError = AxiosError<unknown>

    export const useUsersControllerUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersControllerUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    return axios.delete(
      `/users/${id}`,options
    );
  }



export const getUsersControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersControllerRemove(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerRemove>>>
    
    export type UsersControllerRemoveMutationError = AxiosError<unknown>

    export const useUsersControllerRemove = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersControllerRemoveMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const notesControllerCreate = (
    createNoteDto: CreateNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/notes`,
      createNoteDto,options
    );
  }



export const getNotesControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerCreate>>, TError,{data: CreateNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof notesControllerCreate>>, TError,{data: CreateNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof notesControllerCreate>>, {data: CreateNoteDto}> = (props) => {
          const {data} = props ?? {};

          return  notesControllerCreate(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type NotesControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof notesControllerCreate>>>
    export type NotesControllerCreateMutationBody = CreateNoteDto
    export type NotesControllerCreateMutationError = AxiosError<unknown>

    export const useNotesControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerCreate>>, TError,{data: CreateNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getNotesControllerCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const notesControllerFindAll = (
    params?: NotesControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto[]>> => {
    return axios.get(
      `/notes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNotesControllerFindAllQueryKey = (params?: NotesControllerFindAllParams,) => [`/notes`, ...(params ? [params]: [])] as const;
  

    
export const getNotesControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof notesControllerFindAll>>, TError = AxiosError<unknown>>(params?: NotesControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindAll>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNotesControllerFindAllQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof notesControllerFindAll>>> = ({ signal }) => notesControllerFindAll(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type NotesControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof notesControllerFindAll>>>
export type NotesControllerFindAllQueryError = AxiosError<unknown>

export const useNotesControllerFindAll = <TData = Awaited<ReturnType<typeof notesControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: NotesControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNotesControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const notesControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<NoteDto>> => {
    return axios.get(
      `/notes/${id}`,options
    );
  }


export const getNotesControllerFindOneQueryKey = (id: string,) => [`/notes/${id}`] as const;
  

    
export const getNotesControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof notesControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindOne>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNotesControllerFindOneQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof notesControllerFindOne>>> = ({ signal }) => notesControllerFindOne(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type NotesControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof notesControllerFindOne>>>
export type NotesControllerFindOneQueryError = AxiosError<unknown>

export const useNotesControllerFindOne = <TData = Awaited<ReturnType<typeof notesControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNotesControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const notesControllerUpdate = (
    id: string,
    updateNoteDto: UpdateNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/notes/${id}`,
      updateNoteDto,options
    );
  }



export const getNotesControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerUpdate>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof notesControllerUpdate>>, TError,{id: string;data: UpdateNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof notesControllerUpdate>>, {id: string;data: UpdateNoteDto}> = (props) => {
          const {id,data} = props ?? {};

          return  notesControllerUpdate(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type NotesControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof notesControllerUpdate>>>
    export type NotesControllerUpdateMutationBody = UpdateNoteDto
    export type NotesControllerUpdateMutationError = AxiosError<unknown>

    export const useNotesControllerUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerUpdate>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getNotesControllerUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const notesControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/notes/${id}`,options
    );
  }



export const getNotesControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof notesControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof notesControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  notesControllerRemove(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type NotesControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof notesControllerRemove>>>
    
    export type NotesControllerRemoveMutationError = AxiosError<unknown>

    export const useNotesControllerRemove = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getNotesControllerRemoveMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const contactsControllerCreate = (
    createContactDto: CreateContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.post(
      `/contacts`,
      createContactDto,options
    );
  }



export const getContactsControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerCreate>>, TError,{data: CreateContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof contactsControllerCreate>>, TError,{data: CreateContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof contactsControllerCreate>>, {data: CreateContactDto}> = (props) => {
          const {data} = props ?? {};

          return  contactsControllerCreate(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ContactsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof contactsControllerCreate>>>
    export type ContactsControllerCreateMutationBody = CreateContactDto
    export type ContactsControllerCreateMutationError = AxiosError<unknown>

    export const useContactsControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerCreate>>, TError,{data: CreateContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getContactsControllerCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const contactsControllerFindAll = (
    params?: ContactsControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto[]>> => {
    return axios.get(
      `/contacts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getContactsControllerFindAllQueryKey = (params?: ContactsControllerFindAllParams,) => [`/contacts`, ...(params ? [params]: [])] as const;
  

    
export const getContactsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof contactsControllerFindAll>>, TError = AxiosError<unknown>>(params?: ContactsControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindAll>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsControllerFindAllQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof contactsControllerFindAll>>> = ({ signal }) => contactsControllerFindAll(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ContactsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof contactsControllerFindAll>>>
export type ContactsControllerFindAllQueryError = AxiosError<unknown>

export const useContactsControllerFindAll = <TData = Awaited<ReturnType<typeof contactsControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: ContactsControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getContactsControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const contactsControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.get(
      `/contacts/${id}`,options
    );
  }


export const getContactsControllerFindOneQueryKey = (id: string,) => [`/contacts/${id}`] as const;
  

    
export const getContactsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof contactsControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindOne>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsControllerFindOneQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof contactsControllerFindOne>>> = ({ signal }) => contactsControllerFindOne(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type ContactsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof contactsControllerFindOne>>>
export type ContactsControllerFindOneQueryError = AxiosError<unknown>

export const useContactsControllerFindOne = <TData = Awaited<ReturnType<typeof contactsControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getContactsControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const contactsControllerUpdate = (
    id: string,
    updateContactDto: UpdateContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.patch(
      `/contacts/${id}`,
      updateContactDto,options
    );
  }



export const getContactsControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerUpdate>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof contactsControllerUpdate>>, TError,{id: string;data: UpdateContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof contactsControllerUpdate>>, {id: string;data: UpdateContactDto}> = (props) => {
          const {id,data} = props ?? {};

          return  contactsControllerUpdate(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ContactsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof contactsControllerUpdate>>>
    export type ContactsControllerUpdateMutationBody = UpdateContactDto
    export type ContactsControllerUpdateMutationError = AxiosError<unknown>

    export const useContactsControllerUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerUpdate>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getContactsControllerUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const contactsControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.delete(
      `/contacts/${id}`,options
    );
  }



export const getContactsControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof contactsControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof contactsControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  contactsControllerRemove(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ContactsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof contactsControllerRemove>>>
    
    export type ContactsControllerRemoveMutationError = AxiosError<unknown>

    export const useContactsControllerRemove = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getContactsControllerRemoveMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
