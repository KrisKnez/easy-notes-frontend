/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * EasyNotes API
 * Documentation for EasyNotes API
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
export type ContactsControllerFindAllParams = {
id?: number;
firstName?: string;
lastName?: string;
email?: string;
phone?: string;
dateOfBirth?: string;
instagram?: string;
userId?: number;
};

export type NotesControllerFindAllParams = {
id?: number;
title?: string;
content?: string;
userId?: number;
};

export type UsersControllerFindAllParams = {
id?: number;
email?: string;
name?: string;
};

export type UsersMeNotesControllerSearchUserNotesParams = {
term: string;
};

export interface CreateContactDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  instagram?: string;
  note?: string;
  userId: number;
}

export interface CreateNoteDto {
  title: string;
  content: string;
  userId: number;
}

export interface CreateUserDto {
  email: string;
  password: string;
  name?: string;
  bio?: string;
}

export interface ChangePasswordDto {
  currentPassword: string;
  newPassword: string;
  repeatNewPassword: string;
}

export interface UpdateUserDto {
  email?: string;
  password?: string;
  name?: string;
  bio?: string;
}

export interface UpdateContactDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  instagram?: string;
  note?: string;
  userId?: number;
}

export interface RetrieveContactDto {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dateOfBirth: string;
  instagram: string;
  note: string;
  createdAt: string;
  updatedAt: string;
  userId: number;
}

export interface CreateUserContactDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  dateOfBirth?: string;
  instagram?: string;
  note?: string;
}

export interface UpdateNoteDto {
  title?: string;
  content?: string;
  userId?: number;
}

export interface RetrieveNoteDto {
  id: number;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  userId: number;
}

export interface CreateUserNoteDto {
  title: string;
  content: string;
}

export interface RetrieveUserDto {
  id: number;
  email: string;
  password: string;
  name: string;
  bio: string;
  createdAt: string;
  updatedAt: string;
}

export interface RegisterDto {
  email: string;
  password: string;
}

export interface LoginDto {
  email: string;
  password: string;
}




export const authControllerLogin = (
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/auth/login`,
      loginDto,options
    );
  }



export const getAuthControllerLoginMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginDto
    export type AuthControllerLoginMutationError = AxiosError<unknown>

    export const useAuthControllerLogin = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerLoginMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const authControllerRegister = (
    registerDto: RegisterDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/auth/register`,
      registerDto,options
    );
  }



export const getAuthControllerRegisterMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = RegisterDto
    export type AuthControllerRegisterMutationError = AxiosError<unknown>

    export const useAuthControllerRegister = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerRegisterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const authControllerLogout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.post(
      `/auth/logout`,undefined,options
    );
  }



export const getAuthControllerLogoutMutationOptions = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogout>>, TVariables> = () => {
          

          return  authControllerLogout(axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogout>>>
    
    export type AuthControllerLogoutMutationError = AxiosError<unknown>

    export const useAuthControllerLogout = <TError = AxiosError<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getAuthControllerLogoutMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersMeNotesControllerCreateUserNote = (
    createUserNoteDto: CreateUserNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto>> => {
    return axios.post(
      `/users/me/notes`,
      createUserNoteDto,options
    );
  }



export const getUsersMeNotesControllerCreateUserNoteMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerCreateUserNote>>, TError,{data: CreateUserNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerCreateUserNote>>, TError,{data: CreateUserNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersMeNotesControllerCreateUserNote>>, {data: CreateUserNoteDto}> = (props) => {
          const {data} = props ?? {};

          return  usersMeNotesControllerCreateUserNote(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersMeNotesControllerCreateUserNoteMutationResult = NonNullable<Awaited<ReturnType<typeof usersMeNotesControllerCreateUserNote>>>
    export type UsersMeNotesControllerCreateUserNoteMutationBody = CreateUserNoteDto
    export type UsersMeNotesControllerCreateUserNoteMutationError = AxiosError<unknown>

    export const useUsersMeNotesControllerCreateUserNote = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerCreateUserNote>>, TError,{data: CreateUserNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersMeNotesControllerCreateUserNoteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersMeNotesControllerFindAllUserNotes = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto[]>> => {
    return axios.get(
      `/users/me/notes`,options
    );
  }


export const getUsersMeNotesControllerFindAllUserNotesQueryKey = () => [`/users/me/notes`] as const;
  

    
export const getUsersMeNotesControllerFindAllUserNotesQueryOptions = <TData = Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersMeNotesControllerFindAllUserNotesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>> = ({ signal }) => usersMeNotesControllerFindAllUserNotes({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UsersMeNotesControllerFindAllUserNotesQueryResult = NonNullable<Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>>
export type UsersMeNotesControllerFindAllUserNotesQueryError = AxiosError<unknown>

export const useUsersMeNotesControllerFindAllUserNotes = <TData = Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerFindAllUserNotes>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersMeNotesControllerFindAllUserNotesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersMeNotesControllerSearchUserNotes = (
    params: UsersMeNotesControllerSearchUserNotesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto[]>> => {
    return axios.get(
      `/users/me/notes/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersMeNotesControllerSearchUserNotesQueryKey = (params: UsersMeNotesControllerSearchUserNotesParams,) => [`/users/me/notes/search`, ...(params ? [params]: [])] as const;
  

    
export const getUsersMeNotesControllerSearchUserNotesQueryOptions = <TData = Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>, TError = AxiosError<unknown>>(params: UsersMeNotesControllerSearchUserNotesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersMeNotesControllerSearchUserNotesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>> = ({ signal }) => usersMeNotesControllerSearchUserNotes(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UsersMeNotesControllerSearchUserNotesQueryResult = NonNullable<Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>>
export type UsersMeNotesControllerSearchUserNotesQueryError = AxiosError<unknown>

export const useUsersMeNotesControllerSearchUserNotes = <TData = Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>, TError = AxiosError<unknown>>(
 params: UsersMeNotesControllerSearchUserNotesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerSearchUserNotes>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersMeNotesControllerSearchUserNotesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersMeNotesControllerFindOneUserNote = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto>> => {
    return axios.get(
      `/users/me/notes/${id}`,options
    );
  }


export const getUsersMeNotesControllerFindOneUserNoteQueryKey = (id: string,) => [`/users/me/notes/${id}`] as const;
  

    
export const getUsersMeNotesControllerFindOneUserNoteQueryOptions = <TData = Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersMeNotesControllerFindOneUserNoteQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>> = ({ signal }) => usersMeNotesControllerFindOneUserNote(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type UsersMeNotesControllerFindOneUserNoteQueryResult = NonNullable<Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>>
export type UsersMeNotesControllerFindOneUserNoteQueryError = AxiosError<unknown>

export const useUsersMeNotesControllerFindOneUserNote = <TData = Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeNotesControllerFindOneUserNote>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersMeNotesControllerFindOneUserNoteQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersMeNotesControllerUpdateUserNote = (
    id: string,
    updateNoteDto: UpdateNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto>> => {
    return axios.patch(
      `/users/me/notes/${id}`,
      updateNoteDto,options
    );
  }



export const getUsersMeNotesControllerUpdateUserNoteMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerUpdateUserNote>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerUpdateUserNote>>, TError,{id: string;data: UpdateNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersMeNotesControllerUpdateUserNote>>, {id: string;data: UpdateNoteDto}> = (props) => {
          const {id,data} = props ?? {};

          return  usersMeNotesControllerUpdateUserNote(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersMeNotesControllerUpdateUserNoteMutationResult = NonNullable<Awaited<ReturnType<typeof usersMeNotesControllerUpdateUserNote>>>
    export type UsersMeNotesControllerUpdateUserNoteMutationBody = UpdateNoteDto
    export type UsersMeNotesControllerUpdateUserNoteMutationError = AxiosError<unknown>

    export const useUsersMeNotesControllerUpdateUserNote = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerUpdateUserNote>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersMeNotesControllerUpdateUserNoteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersMeNotesControllerRemoveUserNote = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto>> => {
    return axios.delete(
      `/users/me/notes/${id}`,options
    );
  }



export const getUsersMeNotesControllerRemoveUserNoteMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerRemoveUserNote>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerRemoveUserNote>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersMeNotesControllerRemoveUserNote>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersMeNotesControllerRemoveUserNote(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersMeNotesControllerRemoveUserNoteMutationResult = NonNullable<Awaited<ReturnType<typeof usersMeNotesControllerRemoveUserNote>>>
    
    export type UsersMeNotesControllerRemoveUserNoteMutationError = AxiosError<unknown>

    export const useUsersMeNotesControllerRemoveUserNote = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeNotesControllerRemoveUserNote>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersMeNotesControllerRemoveUserNoteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersContactsControllerCreateUserContact = (
    createUserContactDto: CreateUserContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.post(
      `/users/contacts`,
      createUserContactDto,options
    );
  }



export const getUsersContactsControllerCreateUserContactMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerCreateUserContact>>, TError,{data: CreateUserContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerCreateUserContact>>, TError,{data: CreateUserContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersContactsControllerCreateUserContact>>, {data: CreateUserContactDto}> = (props) => {
          const {data} = props ?? {};

          return  usersContactsControllerCreateUserContact(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersContactsControllerCreateUserContactMutationResult = NonNullable<Awaited<ReturnType<typeof usersContactsControllerCreateUserContact>>>
    export type UsersContactsControllerCreateUserContactMutationBody = CreateUserContactDto
    export type UsersContactsControllerCreateUserContactMutationError = AxiosError<unknown>

    export const useUsersContactsControllerCreateUserContact = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerCreateUserContact>>, TError,{data: CreateUserContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersContactsControllerCreateUserContactMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersContactsControllerFindAllUserContacts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto[]>> => {
    return axios.get(
      `/users/contacts`,options
    );
  }


export const getUsersContactsControllerFindAllUserContactsQueryKey = () => [`/users/contacts`] as const;
  

    
export const getUsersContactsControllerFindAllUserContactsQueryOptions = <TData = Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersContactsControllerFindAllUserContactsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>> = ({ signal }) => usersContactsControllerFindAllUserContacts({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UsersContactsControllerFindAllUserContactsQueryResult = NonNullable<Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>>
export type UsersContactsControllerFindAllUserContactsQueryError = AxiosError<unknown>

export const useUsersContactsControllerFindAllUserContacts = <TData = Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersContactsControllerFindAllUserContacts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersContactsControllerFindAllUserContactsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersContactsControllerFindOneUserContact = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.get(
      `/users/contacts/${id}`,options
    );
  }


export const getUsersContactsControllerFindOneUserContactQueryKey = (id: string,) => [`/users/contacts/${id}`] as const;
  

    
export const getUsersContactsControllerFindOneUserContactQueryOptions = <TData = Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersContactsControllerFindOneUserContactQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>> = ({ signal }) => usersContactsControllerFindOneUserContact(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type UsersContactsControllerFindOneUserContactQueryResult = NonNullable<Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>>
export type UsersContactsControllerFindOneUserContactQueryError = AxiosError<unknown>

export const useUsersContactsControllerFindOneUserContact = <TData = Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersContactsControllerFindOneUserContact>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersContactsControllerFindOneUserContactQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersContactsControllerUpdateUserContact = (
    id: string,
    updateContactDto: UpdateContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.patch(
      `/users/contacts/${id}`,
      updateContactDto,options
    );
  }



export const getUsersContactsControllerUpdateUserContactMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerUpdateUserContact>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerUpdateUserContact>>, TError,{id: string;data: UpdateContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersContactsControllerUpdateUserContact>>, {id: string;data: UpdateContactDto}> = (props) => {
          const {id,data} = props ?? {};

          return  usersContactsControllerUpdateUserContact(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersContactsControllerUpdateUserContactMutationResult = NonNullable<Awaited<ReturnType<typeof usersContactsControllerUpdateUserContact>>>
    export type UsersContactsControllerUpdateUserContactMutationBody = UpdateContactDto
    export type UsersContactsControllerUpdateUserContactMutationError = AxiosError<unknown>

    export const useUsersContactsControllerUpdateUserContact = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerUpdateUserContact>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersContactsControllerUpdateUserContactMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersContactsControllerRemoveUserContact = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.delete(
      `/users/contacts/${id}`,options
    );
  }



export const getUsersContactsControllerRemoveUserContactMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerRemoveUserContact>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerRemoveUserContact>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersContactsControllerRemoveUserContact>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersContactsControllerRemoveUserContact(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersContactsControllerRemoveUserContactMutationResult = NonNullable<Awaited<ReturnType<typeof usersContactsControllerRemoveUserContact>>>
    
    export type UsersContactsControllerRemoveUserContactMutationError = AxiosError<unknown>

    export const useUsersContactsControllerRemoveUserContact = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersContactsControllerRemoveUserContact>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersContactsControllerRemoveUserContactMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersMeControllerMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.get(
      `/users/me`,options
    );
  }


export const getUsersMeControllerMeQueryKey = () => [`/users/me`] as const;
  

    
export const getUsersMeControllerMeQueryOptions = <TData = Awaited<ReturnType<typeof usersMeControllerMe>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeControllerMe>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersMeControllerMe>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersMeControllerMeQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMeControllerMe>>> = ({ signal }) => usersMeControllerMe({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UsersMeControllerMeQueryResult = NonNullable<Awaited<ReturnType<typeof usersMeControllerMe>>>
export type UsersMeControllerMeQueryError = AxiosError<unknown>

export const useUsersMeControllerMe = <TData = Awaited<ReturnType<typeof usersMeControllerMe>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMeControllerMe>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersMeControllerMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersMeControllerUpdateMe = (
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.patch(
      `/users/me`,
      updateUserDto,options
    );
  }



export const getUsersMeControllerUpdateMeMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeControllerUpdateMe>>, TError,{data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersMeControllerUpdateMe>>, TError,{data: UpdateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersMeControllerUpdateMe>>, {data: UpdateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  usersMeControllerUpdateMe(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersMeControllerUpdateMeMutationResult = NonNullable<Awaited<ReturnType<typeof usersMeControllerUpdateMe>>>
    export type UsersMeControllerUpdateMeMutationBody = UpdateUserDto
    export type UsersMeControllerUpdateMeMutationError = AxiosError<unknown>

    export const useUsersMeControllerUpdateMe = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeControllerUpdateMe>>, TError,{data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersMeControllerUpdateMeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersMeControllerChangePassword = (
    changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.post(
      `/users/me/change-password`,
      changePasswordDto,options
    );
  }



export const getUsersMeControllerChangePasswordMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeControllerChangePassword>>, TError,{data: ChangePasswordDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersMeControllerChangePassword>>, TError,{data: ChangePasswordDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersMeControllerChangePassword>>, {data: ChangePasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  usersMeControllerChangePassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersMeControllerChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof usersMeControllerChangePassword>>>
    export type UsersMeControllerChangePasswordMutationBody = ChangePasswordDto
    export type UsersMeControllerChangePasswordMutationError = AxiosError<unknown>

    export const useUsersMeControllerChangePassword = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersMeControllerChangePassword>>, TError,{data: ChangePasswordDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersMeControllerChangePasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersControllerCreate = (
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.post(
      `/users`,
      createUserDto,options
    );
  }



export const getUsersControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerCreate>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  usersControllerCreate(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreate>>>
    export type UsersControllerCreateMutationBody = CreateUserDto
    export type UsersControllerCreateMutationError = AxiosError<unknown>

    export const useUsersControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersControllerCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersControllerFindAll = (
    params?: UsersControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto[]>> => {
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersControllerFindAllQueryKey = (params?: UsersControllerFindAllParams,) => [`/users`, ...(params ? [params]: [])] as const;
  

    
export const getUsersControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerFindAll>>, TError = AxiosError<unknown>>(params?: UsersControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindAll>>> = ({ signal }) => usersControllerFindAll(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type UsersControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindAll>>>
export type UsersControllerFindAllQueryError = AxiosError<unknown>

export const useUsersControllerFindAll = <TData = Awaited<ReturnType<typeof usersControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: UsersControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.get(
      `/users/${id}`,options
    );
  }


export const getUsersControllerFindOneQueryKey = (id: string,) => [`/users/${id}`] as const;
  

    
export const getUsersControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindOne>>> = ({ signal }) => usersControllerFindOne(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type UsersControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerFindOne>>>
export type UsersControllerFindOneQueryError = AxiosError<unknown>

export const useUsersControllerFindOne = <TData = Awaited<ReturnType<typeof usersControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getUsersControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const usersControllerUpdate = (
    id: string,
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.patch(
      `/users/${id}`,
      updateUserDto,options
    );
  }



export const getUsersControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdate>>, {id: string;data: UpdateUserDto}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerUpdate(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdate>>>
    export type UsersControllerUpdateMutationBody = UpdateUserDto
    export type UsersControllerUpdateMutationError = AxiosError<unknown>

    export const useUsersControllerUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersControllerUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const usersControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveUserDto>> => {
    return axios.delete(
      `/users/${id}`,options
    );
  }



export const getUsersControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  usersControllerRemove(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UsersControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerRemove>>>
    
    export type UsersControllerRemoveMutationError = AxiosError<unknown>

    export const useUsersControllerRemove = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getUsersControllerRemoveMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const notesControllerCreate = (
    createNoteDto: CreateNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/notes`,
      createNoteDto,options
    );
  }



export const getNotesControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerCreate>>, TError,{data: CreateNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof notesControllerCreate>>, TError,{data: CreateNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof notesControllerCreate>>, {data: CreateNoteDto}> = (props) => {
          const {data} = props ?? {};

          return  notesControllerCreate(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type NotesControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof notesControllerCreate>>>
    export type NotesControllerCreateMutationBody = CreateNoteDto
    export type NotesControllerCreateMutationError = AxiosError<unknown>

    export const useNotesControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerCreate>>, TError,{data: CreateNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getNotesControllerCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const notesControllerFindAll = (
    params?: NotesControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto[]>> => {
    return axios.get(
      `/notes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getNotesControllerFindAllQueryKey = (params?: NotesControllerFindAllParams,) => [`/notes`, ...(params ? [params]: [])] as const;
  

    
export const getNotesControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof notesControllerFindAll>>, TError = AxiosError<unknown>>(params?: NotesControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindAll>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNotesControllerFindAllQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof notesControllerFindAll>>> = ({ signal }) => notesControllerFindAll(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type NotesControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof notesControllerFindAll>>>
export type NotesControllerFindAllQueryError = AxiosError<unknown>

export const useNotesControllerFindAll = <TData = Awaited<ReturnType<typeof notesControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: NotesControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNotesControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const notesControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveNoteDto>> => {
    return axios.get(
      `/notes/${id}`,options
    );
  }


export const getNotesControllerFindOneQueryKey = (id: string,) => [`/notes/${id}`] as const;
  

    
export const getNotesControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof notesControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindOne>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNotesControllerFindOneQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof notesControllerFindOne>>> = ({ signal }) => notesControllerFindOne(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type NotesControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof notesControllerFindOne>>>
export type NotesControllerFindOneQueryError = AxiosError<unknown>

export const useNotesControllerFindOne = <TData = Awaited<ReturnType<typeof notesControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof notesControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getNotesControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const notesControllerUpdate = (
    id: string,
    updateNoteDto: UpdateNoteDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.patch(
      `/notes/${id}`,
      updateNoteDto,options
    );
  }



export const getNotesControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerUpdate>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof notesControllerUpdate>>, TError,{id: string;data: UpdateNoteDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof notesControllerUpdate>>, {id: string;data: UpdateNoteDto}> = (props) => {
          const {id,data} = props ?? {};

          return  notesControllerUpdate(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type NotesControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof notesControllerUpdate>>>
    export type NotesControllerUpdateMutationBody = UpdateNoteDto
    export type NotesControllerUpdateMutationError = AxiosError<unknown>

    export const useNotesControllerUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerUpdate>>, TError,{id: string;data: UpdateNoteDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getNotesControllerUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const notesControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/notes/${id}`,options
    );
  }



export const getNotesControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof notesControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof notesControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  notesControllerRemove(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type NotesControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof notesControllerRemove>>>
    
    export type NotesControllerRemoveMutationError = AxiosError<unknown>

    export const useNotesControllerRemove = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof notesControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getNotesControllerRemoveMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const contactsControllerCreate = (
    createContactDto: CreateContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.post(
      `/contacts`,
      createContactDto,options
    );
  }



export const getContactsControllerCreateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerCreate>>, TError,{data: CreateContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof contactsControllerCreate>>, TError,{data: CreateContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof contactsControllerCreate>>, {data: CreateContactDto}> = (props) => {
          const {data} = props ?? {};

          return  contactsControllerCreate(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ContactsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof contactsControllerCreate>>>
    export type ContactsControllerCreateMutationBody = CreateContactDto
    export type ContactsControllerCreateMutationError = AxiosError<unknown>

    export const useContactsControllerCreate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerCreate>>, TError,{data: CreateContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getContactsControllerCreateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const contactsControllerFindAll = (
    params?: ContactsControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto[]>> => {
    return axios.get(
      `/contacts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getContactsControllerFindAllQueryKey = (params?: ContactsControllerFindAllParams,) => [`/contacts`, ...(params ? [params]: [])] as const;
  

    
export const getContactsControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof contactsControllerFindAll>>, TError = AxiosError<unknown>>(params?: ContactsControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindAll>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsControllerFindAllQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof contactsControllerFindAll>>> = ({ signal }) => contactsControllerFindAll(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ContactsControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof contactsControllerFindAll>>>
export type ContactsControllerFindAllQueryError = AxiosError<unknown>

export const useContactsControllerFindAll = <TData = Awaited<ReturnType<typeof contactsControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: ContactsControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindAll>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getContactsControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const contactsControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.get(
      `/contacts/${id}`,options
    );
  }


export const getContactsControllerFindOneQueryKey = (id: string,) => [`/contacts/${id}`] as const;
  

    
export const getContactsControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof contactsControllerFindOne>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindOne>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContactsControllerFindOneQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof contactsControllerFindOne>>> = ({ signal }) => contactsControllerFindOne(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type ContactsControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof contactsControllerFindOne>>>
export type ContactsControllerFindOneQueryError = AxiosError<unknown>

export const useContactsControllerFindOne = <TData = Awaited<ReturnType<typeof contactsControllerFindOne>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof contactsControllerFindOne>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getContactsControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const contactsControllerUpdate = (
    id: string,
    updateContactDto: UpdateContactDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.patch(
      `/contacts/${id}`,
      updateContactDto,options
    );
  }



export const getContactsControllerUpdateMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerUpdate>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof contactsControllerUpdate>>, TError,{id: string;data: UpdateContactDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof contactsControllerUpdate>>, {id: string;data: UpdateContactDto}> = (props) => {
          const {id,data} = props ?? {};

          return  contactsControllerUpdate(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ContactsControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof contactsControllerUpdate>>>
    export type ContactsControllerUpdateMutationBody = UpdateContactDto
    export type ContactsControllerUpdateMutationError = AxiosError<unknown>

    export const useContactsControllerUpdate = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerUpdate>>, TError,{id: string;data: UpdateContactDto}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getContactsControllerUpdateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const contactsControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RetrieveContactDto>> => {
    return axios.delete(
      `/contacts/${id}`,options
    );
  }



export const getContactsControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof contactsControllerRemove>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof contactsControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  contactsControllerRemove(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ContactsControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof contactsControllerRemove>>>
    
    export type ContactsControllerRemoveMutationError = AxiosError<unknown>

    export const useContactsControllerRemove = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof contactsControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getContactsControllerRemoveMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
